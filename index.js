const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const { Pool } = require('pg');

const app = express();
const port = process.env.PORT || 3000;

app.use(express.json());

const token = process.env.BOT_TOKEN;
const isProduction = process.env.NODE_ENV === 'production' || process.env.RENDER;

const bot = isProduction 
  ? new TelegramBot(token)
  : new TelegramBot(token, { polling: true });

// PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: true
});

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
async function initDatabase() {
  try {
    await pool.query(`
      CREATE TABLE IF NOT EXISTS users (
        telegram_id BIGINT PRIMARY KEY,
        telegram_username VARCHAR(255),
        game_nickname VARCHAR(255) UNIQUE,
        game_id VARCHAR(255) UNIQUE,
        state VARCHAR(50) DEFAULT 'awaiting_nickname',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);

    await pool.query(`
      CREATE TABLE IF NOT EXISTS user_stats (
        user_id BIGINT PRIMARY KEY REFERENCES users(telegram_id),
        rating INTEGER DEFAULT 1000,
        matches INTEGER DEFAULT 0,
        wins INTEGER DEFAULT 0,
        losses INTEGER DEFAULT 0,
        kills INTEGER DEFAULT 0,
        deaths INTEGER DEFAULT 0,
        last_30_kills INTEGER[] DEFAULT '{}',
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);

    await pool.query(`
      CREATE TABLE IF NOT EXISTS bans (
        user_id BIGINT PRIMARY KEY REFERENCES users(telegram_id),
        permanent BOOLEAN DEFAULT false,
        until TIMESTAMP,
        banned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        banned_by BIGINT
      )
    `);

    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∏
function isValidNickname(nickname) {
  return /^[a-zA-Z0-9_]{3,20}$/.test(nickname);
}

function isValidGameId(id) {
  return /^\d{8,9}$/.test(id);
}

async function isAdmin(chatId) {
  const result = await pool.query(
    'SELECT COUNT(*) FROM users WHERE telegram_id = $1 AND telegram_id IN (6005466815)',
    [chatId]
  );
  return result.rows[0].count > 0;
}

async function isBanned(chatId) {
  const result = await pool.query(
    `SELECT * FROM bans WHERE user_id = $1 AND (permanent = true OR until > NOW())`,
    [chatId]
  );
  return result.rows.length > 0;
}

function getBanTimeLeft(until) {
  if (!until) return '–Ω–∞–≤—Å–µ–≥–¥–∞';
  const timeLeft = new Date(until) - Date.now();
  if (timeLeft <= 0) return '–∏—Å—Ç–µ–∫';
  
  const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
  const hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
  
  if (days > 0) return `${days}–¥ ${hours}—á`;
  if (hours > 0) return `${hours}—á`;
  return '–º–µ–Ω–µ–µ —á–∞—Å–∞';
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function showMainMenu(chatId, username) {
  const menuOptions = {
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üéÆ –ù–∞–π—Ç–∏ –º–∞—Ç—á', callback_data: 'find_match' },
          { text: 'üìä –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }
        ],
        [
          { text: 'üèÜ –†–µ–π—Ç–∏–Ω–≥', callback_data: 'rating' },
          { text: 'üë• –î—Ä—É–∑—å—è', callback_data: 'friends' }
        ],
        [
          { text: 'üìã –ö–æ–º–∞–Ω–¥—ã', callback_data: 'commands' },
          { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' }
        ]
      ]
    }
  };
  
  bot.sendMessage(chatId, `üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${username}!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, menuOptions);
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const username = msg.from.username || msg.from.first_name;

  try {
    if (await isBanned(chatId)) {
      const banResult = await pool.query(
        'SELECT * FROM bans WHERE user_id = $1',
        [chatId]
      );
      const ban = banResult.rows[0];
      const timeLeft = getBanTimeLeft(ban.until);
      const message = ban.permanent 
        ? '‚ùå –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞.'
        : `‚ùå –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–∞–Ω. –†–∞–∑–±–∞–Ω —á–µ—Ä–µ–∑ ${timeLeft}.`;
      return bot.sendMessage(chatId, message);
    }

    const userResult = await pool.query(
      'SELECT * FROM users WHERE telegram_id = $1',
      [chatId]
    );

    if (userResult.rows.length > 0 && userResult.rows[0].state === 'completed') {
      showMainMenu(chatId, username);
    } else {
      if (userResult.rows.length === 0) {
        await pool.query(
          'INSERT INTO users (telegram_id, telegram_username, state) VALUES ($1, $2, $3)',
          [chatId, username, 'awaiting_nickname']
        );
      } else {
        await pool.query(
          'UPDATE users SET state = $1 WHERE telegram_id = $2',
          ['awaiting_nickname', chatId]
        );
      }
      
      bot.sendMessage(chatId, `üéÆ –ü—Ä–∏–≤–µ—Ç, ${username}!\n\n–ù–∞–ø–∏—à–∏—Ç–µ –∏–≥—Ä–æ–≤–æ–π nickname:\n‚Ä¢ –¢–æ–ª—å–∫–æ EN –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _\n‚Ä¢ 3-20 —Å–∏–º–≤–æ–ª–æ–≤`);
    }
  } catch (error) {
    console.error('Error in /start:', error);
    bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text?.trim();

  if (!text || text.startsWith('/')) return;

  try {
    if (await isBanned(chatId)) {
      return bot.sendMessage(chatId, '‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.');
    }

    const userResult = await pool.query(
      'SELECT * FROM users WHERE telegram_id = $1',
      [chatId]
    );

    if (userResult.rows.length === 0) return;

    const user = userResult.rows[0];

    if (user.state === 'awaiting_nickname') {
      if (!isValidNickname(text)) {
        return bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –¢–æ–ª—å–∫–æ EN –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _. 3-20 —Å–∏–º–≤–æ–ª–æ–≤.');
      }

      await pool.query(
        'UPDATE users SET game_nickname = $1, state = $2 WHERE telegram_id = $3',
        [text, 'awaiting_id', chatId]
      );
      
      bot.sendMessage(chatId, '‚úÖ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ ID –∏–≥—Ä—ã (8-9 —Ü–∏—Ñ—Ä):');
      
    } else if (user.state === 'awaiting_id') {
      if (!isValidGameId(text)) {
        return bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID! –¢–æ–ª—å–∫–æ 8-9 —Ü–∏—Ñ—Ä.');
      }

      await pool.query(
        'UPDATE users SET game_id = $1, state = $2 WHERE telegram_id = $3',
        [text, 'completed', chatId]
      );

      await pool.query(
        'INSERT INTO user_stats (user_id) VALUES ($1) ON CONFLICT (user_id) DO NOTHING',
        [chatId]
      );
      
      bot.sendMessage(chatId, `üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\nNickname: ${user.game_nickname}\nID: ${text}`);
      showMainMenu(chatId, user.telegram_username);
    }
  } catch (error) {
    console.error('Error handling message:', error);
    bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// Webhook –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
if (isProduction) {
  const webhookUrl = `https://${process.env.RENDER_EXTERNAL_HOSTNAME}/`;
  
  app.post('/', (req, res) => {
    bot.processUpdate(req.body);
    res.sendStatus(200);
  });

  bot.setWebHook(webhookUrl).then(() => {
    console.log('üîó Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }).catch(console.error);
}

// Health check
app.get('/', (req, res) => {
  res.send('ü§ñ Zekiro Faceit Bot is running!');
});

app.get('/health', async (req, res) => {
  try {
    await pool.query('SELECT 1');
    res.json({ status: 'OK', database: 'connected' });
  } catch (error) {
    res.status(500).json({ status: 'ERROR', database: 'disconnected' });
  }
});

// –ó–∞–ø—É—Å–∫
app.listen(port, async () => {
  console.log(`üöÄ Server running on port ${port}`);
  await initDatabase();
});

console.log(`ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ: ${isProduction ? 'PRODUCTION' : 'DEVELOPMENT'}`);