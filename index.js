const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const fs = require('fs');

const app = express();
const port = process.env.PORT || 3000;

app.get('/', (req, res) => {
  res.send('ü§ñ Zekiro Faceit Bot is running!');
});

app.listen(port, () => {
  console.log(`üöÄ Server running on port ${port}`);
});

const token = process.env.BOT_TOKEN;
const bot = new TelegramBot(token, { polling: true });

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
let users = {};
let bans = {};
let admins = new Set();
let userStats = {};

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
function loadData() {
  try {
    if (fs.existsSync('data.json')) {
      const data = JSON.parse(fs.readFileSync('data.json', 'utf8'));
      users = data.users || {};
      bans = data.bans || {};
      admins = new Set(data.admins || []);
      userStats = data.stats || {};
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
      const adminEnv = process.env.ADMIN_IDS || '';
      if (adminEnv) {
        adminEnv.split(',').forEach(id => admins.add(id.trim()));
      }
    }
  } catch (error) {
    console.log('–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö');
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
function saveData() {
  try {
    const data = {
      users: users,
      bans: bans,
      admins: Array.from(admins),
      stats: userStats
    };
    fs.writeFileSync('data.json', JSON.stringify(data, null, 2));
  } catch (error) {
    console.log('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
  }
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
loadData();

// –ü—Ä–æ–≤–µ—Ä–∫–∏
function isValidNickname(nickname) {
  return nickname && /^[a-zA-Z0-9_]{3,20}$/.test(nickname);
}

function isValidGameId(id) {
  return id && /^\d{8,9}$/.test(id);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
function isAdmin(chatId) {
  return admins.has(chatId.toString());
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∞
function isBanned(chatId) {
  const banInfo = bans[chatId];
  if (!banInfo) return false;
  
  if (banInfo.permanent) return true;
  if (banInfo.until && Date.now() < banInfo.until) return true;
  
  delete bans[chatId];
  saveData();
  return false;
}

// –í—Ä–µ–º—è –¥–æ —Ä–∞–∑–±–∞–Ω–∞
function getBanTimeLeft(until) {
  if (!until) return '–Ω–∞–≤—Å–µ–≥–¥–∞';
  
  const timeLeft = until - Date.now();
  if (timeLeft <= 0) return '–∏—Å—Ç–µ–∫';
  
  const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
  const hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
  
  if (days > 0) return `${days}–¥ ${hours}—á`;
  if (hours > 0) return `${hours}—á`;
  return '–º–µ–Ω–µ–µ —á–∞—Å–∞';
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è
function showProfile(chatId) {
  const user = users[chatId];
  if (!user || !user.gameNickname) {
    return bot.sendMessage(chatId, '‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start');
  }

  // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (!userStats[chatId]) {
    userStats[chatId] = {
      rating: 1000,
      matches: 0,
      wins: 0,
      losses: 0,
      kills: 0,
      deaths: 0,
      last30kills: []
    };
  }
  
  const stats = userStats[chatId];
  
  // –†–∞—Å—á–µ—Ç –≤–∏–Ω—Ä–µ–π—Ç–∞
  const winRate = stats.matches > 0 ? Math.round((stats.wins / stats.matches) * 100) : 0;
  
  // –†–∞—Å—á–µ—Ç K/D
  const kd = stats.deaths > 0 ? (stats.kills / stats.deaths).toFixed(2) : stats.kills > 0 ? '‚àû' : '0.00';
  
  // –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –∫–∏–ª–ª–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –∏–≥—Ä
  const avgKills = stats.last30kills.length > 0 
    ? (stats.last30kills.reduce((sum, k) => sum + k, 0) / stats.last30kills.length).toFixed(1)
    : '0.0';

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å
  const profileText = 
    `üë§ *–ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞:*\n` +
    `\n` +
    `üì± *TG ID:* ${chatId}\n` +
    `\n` +
    `üéÆ *–ù–∏–∫–Ω–µ–π–º:* ${user.gameNickname}\n` +
    `üÜî *ID –∏–≥—Ä—ã:* ${user.gameId}\n` +
    `‚≠ê *ZF —Ä–µ–π—Ç–∏–Ω–≥:* ${stats.rating}\n` +
    `\n` +
    `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n` +
    `üéØ *–°—ã–≥—Ä–∞–Ω–æ –º–∞—Ç—á–µ–π:* ${stats.matches}\n` +
    `‚úÖ *–ü–æ–±–µ–¥—ã:* ${stats.wins}\n` +
    `‚ùå *–ü–æ—Ä–∞–∂–µ–Ω–∏—è:* ${stats.losses}\n` +
    `üìà *–í–∏–Ω—Ä–µ–π—Ç:* ${winRate}%\n` +
    `\n` +
    `üî´ *K/D:* ${kd} (${stats.kills}/${stats.deaths})\n` +
    `üéØ *–°—Ä. –∫–∏–ª–ª–æ–≤:* ${avgKills} –∑–∞ 30 –∏–≥—Ä\n` +
    `\n` +
    `üë• *–î—Ä—É–∑–µ–π:* ${user.friends?.length || 0}`;

  bot.sendMessage(chatId, profileText, { parse_mode: 'Markdown' });
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function showMainMenu(chatId, username) {
  if (isBanned(chatId)) {
    const banInfo = bans[chatId];
    const timeLeft = getBanTimeLeft(banInfo.until);
    const message = banInfo.permanent 
      ? '‚ùå –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞.'
      : `‚ùå –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–∞–Ω. –†–∞–∑–±–∞–Ω —á–µ—Ä–µ–∑ ${timeLeft}.`;
    return bot.sendMessage(chatId, message);
  }

  const menuOptions = {
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üéÆ –ù–∞–π—Ç–∏ –º–∞—Ç—á', callback_data: 'find_match' },
          { text: 'üìä –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }
        ],
        [
          { text: 'üèÜ –†–µ–π—Ç–∏–Ω–≥', callback_data: 'rating' },
          { text: 'üë• –î—Ä—É–∑—å—è', callback_data: 'friends' }
        ],
        [
          { text: 'üìã –ö–æ–º–∞–Ω–¥—ã', callback_data: 'commands' },
          { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' }
        ]
      ]
    }
  };
  
  bot.sendMessage(chatId, `üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${username}!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, menuOptions);
}

// –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
function showAdminPanel(chatId) {
  const adminMenu = {
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üë• –°–ø–∏—Å–æ–∫ users', callback_data: 'admin_users' },
          { text: 'üö´ –ó–∞–±–∞–Ω–∏—Ç—å', callback_data: 'admin_ban' }
        ],
        [
          { text: '‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å', callback_data: 'admin_unban' },
          { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_stats' }
        ],
        [
          { text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }
        ]
      ]
    }
  };
  
  bot.sendMessage(chatId, '‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', adminMenu);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', (callbackQuery) => {
  const msg = callbackQuery.message;
  const chatId = msg.chat.id;
  const data = callbackQuery.data;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∞
  if (isBanned(chatId)) {
    const banInfo = bans[chatId];
    const timeLeft = getBanTimeLeft(banInfo.until);
    const message = banInfo.permanent 
      ? '‚ùå –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞.'
      : `‚ùå –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–∞–Ω. –†–∞–∑–±–∞–Ω —á–µ—Ä–µ–∑ ${timeLeft}.`;
    return bot.answerCallbackQuery(callbackQuery.id, { text: message });
  }

  bot.answerCallbackQuery(callbackQuery.id);

  const user = users[chatId];
  if (!user || user.state !== 'completed') return;

  // –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
  if (data.startsWith('admin_')) {
    if (!isAdmin(chatId)) {
      return bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
    }
    
    switch(data) {
      case 'admin_users':
        showUserList(chatId);
        break;
      case 'admin_ban':
        bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ä–æ–∫ –±–∞–Ω–∞:\n–ü—Ä–∏–º–µ—Ä: 123456789 7d\n–ò–ª–∏: 123456789 permanent');
        users[chatId].adminAction = 'ban';
        break;
      case 'admin_unban':
        bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞:');
        users[chatId].adminAction = 'unban';
        break;
      case 'admin_stats':
        showBanStats(chatId);
        break;
    }
    return;
  }

  // –û–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
  switch(data) {
    case 'find_match':
      bot.sendMessage(chatId, 'üîç –ò—â–µ–º –º–∞—Ç—á...');
      break;
    case 'profile':
      showProfile(chatId);
      break;
    case 'rating':
      showRating(chatId);
      break;
    case 'friends':
      showFriendsMenu(chatId);
      break;
    case 'commands':
      const cmdText = isAdmin(chatId) 
        ? 'üìã –ö–æ–º–∞–Ω–¥—ã:\n/start - –º–µ–Ω—é\n/admin - –∞–¥–º–∏–Ω–∫–∞\n/ban ID —Å—Ä–æ–∫ - –±–∞–Ω\n/unban ID - —Ä–∞–∑–±–∞–Ω'
        : 'üìã –ö–æ–º–∞–Ω–¥—ã:\n/start - –º–µ–Ω—é';
      bot.sendMessage(chatId, cmdText);
      break;
    case 'help':
      bot.sendMessage(chatId, '‚ùì –ü–æ–º–æ—â—å: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é');
      break;
    case 'back_to_menu':
      showMainMenu(chatId, user.telegramUsername);
      break;
  }
});

// –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function showUserList(chatId) {
  const userList = Object.entries(users)
    .filter(([_, u]) => u.state === 'completed')
    .map(([id, u]) => `üë§ ${u.telegramUsername}\nüéÆ ${u.gameNickname || '–Ω–µ—Ç'}\nüÜî ${u.gameId || '–Ω–µ—Ç'}\nüì± ${id}`)
    .join('\n\n');

  bot.sendMessage(chatId, `üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n${userList || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}`);
}

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–Ω–æ–≤
function showBanStats(chatId) {
  const activeBans = Object.entries(bans).filter(([_, b]) => 
    b.permanent || (b.until && Date.now() < b.until)
  );
  
  bot.sendMessage(chatId, 
    `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–Ω–æ–≤:\n\n` +
    `üö´ –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–Ω–æ–≤: ${activeBans.length}\n` +
    `üîí –ù–∞–≤—Å–µ–≥–¥–∞: ${activeBans.filter(([_, b]) => b.permanent).length}\n` +
    `‚è∞ –í—Ä–µ–º–µ–Ω–Ω—ã—Ö: ${activeBans.filter(([_, b]) => !b.permanent).length}`
  );
}

// –ú–µ–Ω—é –¥—Ä—É–∑–µ–π
function showFriendsMenu(chatId) {
  const user = users[chatId];
  const friendsCount = user.friends?.length || 0;
  
  const friendsMenu = {
    reply_markup: {
      inline_keyboard: [
        [
          { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å', callback_data: 'add_friend' },
          { text: '‚ûñ –£–¥–∞–ª–∏—Ç—å', callback_data: 'remove_friend' }
        ],
        [
          { text: 'üìã –°–ø–∏—Å–æ–∫', callback_data: 'friends_list' }
        ],
        [
          { text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }
        ]
      ]
    }
  };
  
  bot.sendMessage(chatId, `üë• –î—Ä—É–∑—å—è: ${friendsCount}`, friendsMenu);
}

// –†–µ–π—Ç–∏–Ω–≥
function showRating(chatId) {
  const activeUsers = Object.entries(userStats)
    .filter(([id, stats]) => users[id] && users[id].state === 'completed')
    .sort((a, b) => b[1].rating - a[1].rating)
    .slice(0, 10);
  
  let ratingText = 'üèÜ *–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ ZF —Ä–µ–π—Ç–∏–Ω–≥—É:*\n\n';
  
  activeUsers.forEach(([userId, stats], index) => {
    const user = users[userId];
    ratingText += `${index + 1}. ${user.gameNickname} - ${stats.rating} ZF\n`;
  });
  
  bot.sendMessage(chatId, ratingText || 'üòî –ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ', { parse_mode: 'Markdown' });
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const username = msg.from.username || msg.from.first_name;
  
  if (isBanned(chatId)) {
    const banInfo = bans[chatId];
    const timeLeft = getBanTimeLeft(banInfo.until);
    const message = banInfo.permanent 
      ? '‚ùå –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞.'
      : `‚ùå –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–∞–Ω. –†–∞–∑–±–∞–Ω —á–µ—Ä–µ–∑ ${timeLeft}.`;
    return bot.sendMessage(chatId, message);
  }
  
  if (users[chatId] && users[chatId].state === 'completed') {
    showMainMenu(chatId, username);
  } else {
    users[chatId] = {
      telegramUsername: username,
      gameNickname: null,
      gameId: null,
      state: 'awaiting_nickname',
      friends: []
    };
    saveData();
    
    bot.sendMessage(chatId, `üéÆ –ü—Ä–∏–≤–µ—Ç, ${username}!\n\n–ù–∞–ø–∏—à–∏—Ç–µ –∏–≥—Ä–æ–≤–æ–π nickname:\n‚Ä¢ –¢–æ–ª—å–∫–æ EN –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _\n‚Ä¢ 3-20 —Å–∏–º–≤–æ–ª–æ–≤`);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /admin
bot.onText(/\/admin/, (msg) => {
  const chatId = msg.chat.id;
  if (!isAdmin(chatId)) return bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
  showAdminPanel(chatId);
});

// –ö–æ–º–∞–Ω–¥–∞ /ban
bot.onText(/\/ban (\d+) (.+)/, (msg, match) => {
  const chatId = msg.chat.id;
  if (!isAdmin(chatId)) return bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
  
  const userId = match[1];
  const duration = match[2].toLowerCase();
  
  if (isBanned(userId)) {
    return bot.sendMessage(chatId, '‚ùå –£–∂–µ –∑–∞–±–∞–Ω–µ–Ω');
  }
  
  let banInfo = {};
  if (duration === 'permanent') {
    banInfo = { permanent: true, bannedAt: Date.now() };
  } else {
    const timeMatch = duration.match(/(\d+)([dh])/);
    if (!timeMatch) return bot.sendMessage(chatId, '‚ùå –§–æ—Ä–º–∞—Ç: 7d –∏–ª–∏ 24h');
    
    const amount = parseInt(timeMatch[1]);
    const unit = timeMatch[2];
    
    let milliseconds = amount * 60 * 60 * 1000; // —á–∞—Å—ã
    if (unit === 'd') milliseconds = amount * 24 * 60 * 60 * 1000;
    
    banInfo = { until: Date.now() + milliseconds, bannedAt: Date.now() };
  }
  
  bans[userId] = banInfo;
  saveData();
  
  const timeLeft = getBanTimeLeft(banInfo.until);
  const message = banInfo.permanent 
    ? '‚ùå –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞.'
    : `‚ùå –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–∞–Ω. –†–∞–∑–±–∞–Ω —á–µ—Ä–µ–∑ ${timeLeft}.`;
  
  bot.sendMessage(chatId, `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–±–∞–Ω–µ–Ω`);
  bot.sendMessage(userId, message);
});

// –ö–æ–º–∞–Ω–¥–∞ /unban
bot.onText(/\/unban (\d+)/, (msg, match) => {
  const chatId = msg.chat.id;
  if (!isAdmin(chatId)) return bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
  
  const userId = match[1];
  if (!isBanned(userId)) return bot.sendMessage(chatId, '‚ùå –ù–µ –∑–∞–±–∞–Ω–µ–Ω');
  
  delete bans[userId];
  saveData();
  
  bot.sendMessage(chatId, `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —Ä–∞–∑–±–∞–Ω–µ–Ω`);
  bot.sendMessage(userId, '‚úÖ –í—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text?.trim();
  
  if (!text || text.startsWith('/')) return;
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∞
  if (isBanned(chatId)) {
    const banInfo = bans[chatId];
    const timeLeft = getBanTimeLeft(banInfo.until);
    const message = banInfo.permanent 
      ? '‚ùå –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞.'
      : `‚ùå –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–∞–Ω. –†–∞–∑–±–∞–Ω —á–µ—Ä–µ–∑ ${timeLeft}.`;
    return bot.sendMessage(chatId, message);
  }
  
  const user = users[chatId];
  if (!user) return;
  
  // –ê–¥–º–∏–Ω –¥–µ–π—Å—Ç–≤–∏—è
  if (user.adminAction && isAdmin(chatId)) {
    handleAdminAction(msg, user);
    return;
  }
  
  // –î—Ä—É–∑—å—è
  if (user.friendAction) {
    handleFriendAction(msg, user);
    return;
  }
  
  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
  if (user.state && user.state !== 'completed') {
    handleRegistration(msg, user);
    return;
  }
  
  bot.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é üì±');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
function handleRegistration(msg, user) {
  const chatId = msg.chat.id;
  const text = msg.text;
  
  if (user.state === 'awaiting_nickname') {
    if (!isValidNickname(text)) {
      return bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –¢–æ–ª—å–∫–æ EN –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _. 3-20 —Å–∏–º–≤–æ–ª–æ–≤.');
    }
    
    user.gameNickname = text;
    user.state = 'awaiting_id';
    saveData();
    
    bot.sendMessage(chatId, '‚úÖ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ ID –∏–≥—Ä—ã (8-9 —Ü–∏—Ñ—Ä):');
    
  } else if (user.state === 'awaiting_id') {
    if (!isValidGameId(text)) {
      return bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID! –¢–æ–ª—å–∫–æ 8-9 —Ü–∏—Ñ—Ä.');
    }
    
    user.gameId = text;
    user.state = 'completed';
    saveData();
    
    bot.sendMessage(chatId, `üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\nNickname: ${user.gameNickname}\nID: ${user.gameId}`);
    showMainMenu(chatId, user.telegramUsername);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω –¥–µ–π—Å—Ç–≤–∏–π
function handleAdminAction(msg, user) {
  const chatId = msg.chat.id;
  const text = msg.text;
  
  if (user.adminAction === 'ban') {
    const parts = text.split(' ');
    const userId = parts[0];
    const duration = parts[1]?.toLowerCase();
    
    if (!duration) {
      return bot.sendMessage(chatId, '‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫ –±–∞–Ω–∞');
    }
    
    if (isBanned(userId)) {
      return bot.sendMessage(chatId, '‚ùå –£–∂–µ –∑–∞–±–∞–Ω–µ–Ω');
    }
    
    let banInfo = {};
    if (duration === 'permanent') {
      banInfo = { permanent: true, bannedAt: Date.now() };
    } else {
      const timeMatch = duration.match(/(\d+)([dh])/);
      if (!timeMatch) return bot.sendMessage(chatId, '‚ùå –§–æ—Ä–º–∞—Ç: 7d –∏–ª–∏ 24h');
      
      const amount = parseInt(timeMatch[1]);
      const unit = timeMatch[2];
      
      let milliseconds = amount * 60 * 60 * 1000;
      if (unit === 'd') milliseconds = amount * 24 * 60 * 60 * 1000;
      
      banInfo = { until: Date.now() + milliseconds, bannedAt: Date.now() };
    }
    
    bans[userId] = banInfo;
    saveData();
    
    const timeLeft = getBanTimeLeft(banInfo.until);
    const message = banInfo.permanent 
      ? '‚ùå –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞.'
      : `‚ùå –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–∞–Ω. –†–∞–∑–±–∞–Ω —á–µ—Ä–µ–∑ ${timeLeft}.`;
    
    bot.sendMessage(chatId, `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–±–∞–Ω–µ–Ω`);
    bot.sendMessage(userId, message);
  }
  
  user.adminAction = null;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–∑–µ–π
function handleFriendAction(msg, user) {
  const chatId = msg.chat.id;
  const text = msg.text;
  
  if (user.friendAction === 'adding') {
    if (!user.friends) user.friends = [];
    user.friends.push(text);
    saveData();
    bot.sendMessage(chatId, `‚úÖ –î—Ä—É–≥ ${text} –¥–æ–±–∞–≤–ª–µ–Ω`);
  }
  
  user.friendAction = null;
  showFriendsMenu(chatId);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–ª–µ –º–∞—Ç—á–∞
function updateMatchStats(chatId, isWin, kills, deaths) {
  if (!userStats[chatId]) {
    userStats[chatId] = {
      rating: 1000,
      matches: 0,
      wins: 0,
      losses: 0,
      kills: 0,
      deaths: 0,
      last30kills: []
    };
  }
  
  const stats = userStats[chatId];
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  stats.matches++;
  if (isWin) {
    stats.wins++;
    stats.rating += 25;
  } else {
    stats.losses++;
    stats.rating = Math.max(500, stats.rating - 15);
  }
  
  stats.kills += kills;
  stats.deaths += deaths;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –∏–≥—Ä
  stats.last30kills.push(kills);
  if (stats.last30kills.length > 30) {
    stats.last30kills.shift();
  }
  
  saveData();
}

console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø—Ä–æ—Ñ–∏–ª—è!');
