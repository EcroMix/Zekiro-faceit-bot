const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const { Pool } = require('pg');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const token = process.env.BOT_TOKEN;
const isProduction = process.env.NODE_ENV === 'production';
const port = process.env.PORT || 3000;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = isProduction 
  ? new TelegramBot(token)
  : new TelegramBot(token, { polling: true });

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Express
const app = express();
app.use(express.json());

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

// ID –∞–¥–º–∏–Ω–æ–≤
const ADMIN_IDS = [6005466815]; // –î–æ–±–∞–≤—å —Å—é–¥–∞ ID –∞–¥–º–∏–Ω–æ–≤

// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const USER_STATES = {
  AWAITING_NICKNAME: 'awaiting_nickname',
  AWAITING_ID: 'awaiting_id',
  COMPLETED: 'completed'
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function initDatabase() {
  try {
    // –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await pool.query(`
      CREATE TABLE IF NOT EXISTS users (
        telegram_id BIGINT PRIMARY KEY,
        telegram_username VARCHAR(255),
        game_nickname VARCHAR(255),
        game_id VARCHAR(255),
        state VARCHAR(50) DEFAULT '${USER_STATES.AWAITING_NICKNAME}',
        friends TEXT[] DEFAULT '{}',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(game_nickname),
        UNIQUE(game_id)
      )
    `);

    // –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    await pool.query(`
      CREATE TABLE IF NOT EXISTS user_stats (
        user_id BIGINT PRIMARY KEY REFERENCES users(telegram_id) ON DELETE CASCADE,
        zf_rating INTEGER DEFAULT 1000,
        matches INTEGER DEFAULT 0,
        wins INTEGER DEFAULT 0,
        losses INTEGER DEFAULT 0,
        kills INTEGER DEFAULT 0,
        deaths INTEGER DEFAULT 0,
        last_30_kills INTEGER[] DEFAULT '{}',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // –¢–∞–±–ª–∏—Ü–∞ –±–∞–Ω–æ–≤
    await pool.query(`
      CREATE TABLE IF NOT EXISTS bans (
        id SERIAL PRIMARY KEY,
        user_id BIGINT REFERENCES users(telegram_id) ON DELETE CASCADE,
        permanent BOOLEAN DEFAULT false,
        until TIMESTAMP,
        banned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        banned_by BIGINT,
        reason TEXT
      )
    `);

    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã:', error);
    throw error;
  }
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è
function isValidNickname(nickname) {
  return nickname && /^[a-zA-Z0-9_]{3,20}$/.test(nickname);
}

function isValidGameId(id) {
  return id && /^\d{8,9}$/.test(id);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
function isAdmin(chatId) {
  return ADMIN_IDS.includes(chatId);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∞
async function checkBan(chatId) {
  try {
    const result = await pool.query(
      `SELECT * FROM bans WHERE user_id = $1 AND (permanent = true OR until > NOW())`,
      [chatId]
    );
    return result.rows[0] || null;
  } catch (error) {
    console.error('Error checking ban:', error);
    return null;
  }
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function showMainMenu(chatId, username) {
  const menuOptions = {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üéÆ –ù–∞–π—Ç–∏ –º–∞—Ç—á', callback_data: 'find_match' }],
        [{ text: 'üìä –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }],
        [{ text: 'üèÜ –†–µ–π—Ç–∏–Ω–≥', callback_data: 'rating' }],
        [{ text: 'üë• –î—Ä—É–∑—å—è', callback_data: 'friends' }],
        [{ text: 'üìã –ö–æ–º–∞–Ω–¥—ã', callback_data: 'commands' }],
        [{ text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' }],
        isAdmin(chatId) ? [{ text: '‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data: 'admin_panel' }] : []
      ].filter(Boolean)
    }
  };
  
  bot.sendMessage(chatId, `üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${username}!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, menuOptions);
}

// –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
function showAdminPanel(chatId) {
  const adminMenu = {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏', callback_data: 'admin_users' }],
        [{ text: 'üî® –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–Ω–∞–º–∏', callback_data: 'admin_bans' }],
        [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã', callback_data: 'admin_stats' }],
        [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
      ]
    }
  };
  
  bot.sendMessage(chatId, '‚öôÔ∏è *–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å Zekiro Faceit*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', adminMenu);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
async function showProfile(chatId) {
  try {
    const userResult = await pool.query(
      `SELECT u.*, us.zf_rating, us.matches, us.wins, us.losses, us.kills, us.deaths, us.last_30_kills
       FROM users u 
       LEFT JOIN user_stats us ON u.telegram_id = us.user_id 
       WHERE u.telegram_id = $1`,
      [chatId]
    );
    
    if (userResult.rows.length === 0 || !userResult.rows[0].game_nickname) {
      return bot.sendMessage(chatId, '‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start');
    }

    const user = userResult.rows[0];
    const stats = userResult.rows[0];

    const winRate = stats.matches > 0 ? Math.round((stats.wins / stats.matches) * 100) : 0;
    const kd = stats.deaths > 0 ? (stats.kills / stats.deaths).toFixed(2) : stats.kills > 0 ? '‚àû' : '0.00';
    
    const last30Kills = stats.last_30_kills || [];
    const avgKills = last30Kills.length > 0 
      ? (last30Kills.reduce((sum, k) => sum + k, 0) / last30Kills.length).toFixed(1)
      : '0.0';

    const profileText = 
      `üë§ *–ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞ Zekiro Faceit:*\n` +
      `\n` +
      `üéÆ *–ù–∏–∫–Ω–µ–π–º:* ${user.game_nickname}\n` +
      `üÜî *ID –∏–≥—Ä—ã:* ${user.game_id}\n` +
      `‚≠ê *ZF —Ä–µ–π—Ç–∏–Ω–≥:* ${stats.zf_rating}\n` +
      `\n` +
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n` +
      `üéØ *–ú–∞—Ç—á–µ–π:* ${stats.matches}\n` +
      `‚úÖ *–ü–æ–±–µ–¥:* ${stats.wins}\n` +
      `‚ùå *–ü–æ—Ä–∞–∂–µ–Ω–∏–π:* ${stats.losses}\n` +
      `üìà *–í–∏–Ω—Ä–µ–π—Ç:* ${winRate}%\n` +
      `\n` +
      `üî´ *K/D:* ${kd}\n` +
      `üéØ *–°—Ä–µ–¥–Ω–µ–µ —É–±–∏–π—Å—Ç–≤:* ${avgKills}\n` +
      `üë• *–î—Ä—É–∑–µ–π:* ${user.friends?.length || 0}`;

    bot.sendMessage(chatId, profileText, { parse_mode: 'Markdown' });
  } catch (error) {
    console.error('Error showing profile:', error);
    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è');
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const username = msg.from.first_name;

  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∞
    const ban = await checkBan(chatId);
    if (ban) {
      const timeLeft = ban.permanent ? '–Ω–∞–≤—Å–µ–≥–¥–∞' : `–¥–æ ${new Date(ban.until).toLocaleDateString()}`;
      return bot.sendMessage(chatId, `‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã ${timeLeft}. –ü—Ä–∏—á–∏–Ω–∞: ${ban.reason || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
    }

    const userResult = await pool.query(
      'SELECT * FROM users WHERE telegram_id = $1',
      [chatId]
    );

    if (userResult.rows.length > 0 && userResult.rows[0].state === USER_STATES.COMPLETED) {
      showMainMenu(chatId, username);
    } else {
      if (userResult.rows.length === 0) {
        await pool.query(
          'INSERT INTO users (telegram_id, telegram_username, state) VALUES ($1, $2, $3)',
          [chatId, msg.from.username || username, USER_STATES.AWAITING_NICKNAME]
        );
      } else {
        await pool.query(
          'UPDATE users SET state = $1, telegram_username = $2 WHERE telegram_id = $3',
          [USER_STATES.AWAITING_NICKNAME, msg.from.username || username, chatId]
        );
      }
      
      bot.sendMessage(chatId, 
        `üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *Zekiro Faceit*!\n\n` +
        `–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π nickname:\n` +
        `‚Ä¢ –¢–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ _\n` +
        `‚Ä¢ –û—Ç 3 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤`,
        { parse_mode: 'Markdown' }
      );
    }
  } catch (error) {
    console.error('Error in /start:', error);
    bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text?.trim();

  if (!text || text.startsWith('/')) return;

  try {
    const ban = await checkBan(chatId);
    if (ban) return;

    const userResult = await pool.query(
      'SELECT state FROM users WHERE telegram_id = $1',
      [chatId]
    );

    if (userResult.rows.length === 0) return;

    const userState = userResult.rows[0].state;

    if (userState === USER_STATES.AWAITING_NICKNAME) {
      if (!isValidNickname(text)) {
        return bot.sendMessage(chatId, 
          '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç nickname!\n' +
          '‚Ä¢ –¢–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã (a-z, A-Z)\n' +
          '‚Ä¢ –¶–∏—Ñ—Ä—ã (0-9) –∏ –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ (_)\n' +
          '‚Ä¢ –û—Ç 3 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤'
        );
      }

      await pool.query(
        'UPDATE users SET game_nickname = $1, state = $2 WHERE telegram_id = $3',
        [text, USER_STATES.AWAITING_ID, chatId]
      );
      
      bot.sendMessage(chatId, 
        '‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à ID –∏–≥—Ä—ã:\n' +
        '‚Ä¢ –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã\n' +
        '‚Ä¢ 8 –∏–ª–∏ 9 —Ü–∏—Ñ—Ä'
      );
      
    } else if (userState === USER_STATES.AWAITING_ID) {
      if (!isValidGameId(text)) {
        return bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∏–≥—Ä—ã! –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 8 –∏–ª–∏ 9 —Ü–∏—Ñ—Ä.');
      }

      await pool.query(
        'UPDATE users SET game_id = $1, state = $2 WHERE telegram_id = $3',
        [text, USER_STATES.COMPLETED, chatId]
      );

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
      await pool.query(`
        INSERT INTO user_stats (user_id) 
        VALUES ($1) 
        ON CONFLICT (user_id) DO NOTHING
      `, [chatId]);
      
      bot.sendMessage(chatId, 
        `üéâ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ Zekiro Faceit –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n` +
        `üìù –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n` +
        `‚Ä¢ Nickname: ${text}\n` +
        `‚Ä¢ ID: ${text}\n\n` +
        `–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞!`,
        { parse_mode: 'Markdown' }
      );
      
      showMainMenu(chatId, msg.from.first_name);
    }
  } catch (error) {
    console.error('Error handling message:', error);
    if (error.code === '23505') { // Unique violation
      bot.sendMessage(chatId, '‚ùå –≠—Ç–æ—Ç nickname –∏–ª–∏ ID —É–∂–µ –∑–∞–Ω—è—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ.');
    } else {
      bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–Ω–æ–ø–∫–∏)
bot.on('callback_query', async (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const messageId = callbackQuery.message.message_id;
  const data = callbackQuery.data;

  try {
    const ban = await checkBan(chatId);
    if (ban) {
      await bot.answerCallbackQuery(callbackQuery.id, { text: '–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã' });
      return;
    }

    switch (data) {
      case 'profile':
        await showProfile(chatId);
        break;
        
      case 'help':
        await bot.sendMessage(chatId, 
          'üìñ *–ü–æ–º–æ—â—å –ø–æ Zekiro Faceit:*\n\n' +
          '‚Ä¢ /start - –ù–∞—á–∞—Ç—å/–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n' +
          '‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ ZF —Ä–µ–π—Ç–∏–Ω–≥\n' +
          '‚Ä¢ –†–µ–π—Ç–∏–Ω–≥ - –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ ZF —Ä–µ–π—Ç–∏–Ω–≥—É\n' +
          '‚Ä¢ –î—Ä—É–∑—å—è - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–∑—å—è–º–∏\n' +
          '‚Ä¢ –ù–∞–π—Ç–∏ –º–∞—Ç—á - –ü–æ–∏—Å–∫ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤\n\n' +
          '–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –ø–æ—Å–ª–µ /start',
          { parse_mode: 'Markdown' }
        );
        break;
        
      case 'admin_panel':
        if (isAdmin(chatId)) {
          await bot.deleteMessage(chatId, messageId);
          await showAdminPanel(chatId);
        } else {
          await bot.answerCallbackQuery(callbackQuery.id, { text: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
        }
        break;
        
      case 'main_menu':
        await bot.deleteMessage(chatId, messageId);
        await showMainMenu(chatId, callbackQuery.from.first_name);
        break;
        
      case 'admin_users':
        if (isAdmin(chatId)) {
          const usersCount = await pool.query('SELECT COUNT(*) FROM users');
          const activeUsers = await pool.query('SELECT COUNT(*) FROM users WHERE state = $1', [USER_STATES.COMPLETED]);
          
          await bot.sendMessage(chatId,
            `üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏*\n\n` +
            `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
            `‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersCount.rows[0].count}\n` +
            `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${activeUsers.rows[0].count}\n` +
            `‚Ä¢ –ó–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö: ${(await pool.query('SELECT COUNT(*) FROM bans WHERE permanent = true OR until > NOW()')).rows[0].count}\n\n` +
            `‚öôÔ∏è –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç—å—é –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã...`,
            { parse_mode: 'Markdown' }
          );
        }
        break;
        
      default:
        await bot.sendMessage(chatId, '‚è≥ –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...');
    }

    await bot.answerCallbackQuery(callbackQuery.id);
  } catch (error) {
    console.error('Error handling callback:', error);
    await bot.answerCallbackQuery(callbackQuery.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
  }
});

// Webhook –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
if (isProduction) {
  app.post('/', (req, res) => {
    bot.processUpdate(req.body);
    res.sendStatus(200);
  });

  bot.setWebHook(`https://${process.env.RENDER_EXTERNAL_HOSTNAME}/`).catch(console.error);
}

// Health check endpoints
app.get('/', (req, res) => {
  res.send('ü§ñ Zekiro Faceit Bot is running!');
});

app.get('/health', async (req, res) => {
  try {
    await pool.query('SELECT 1');
    res.json({ 
      status: 'OK', 
      database: 'connected',
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    res.status(500).json({ 
      status: 'ERROR', 
      database: 'disconnected',
      error: error.message 
    });
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(port, async () => {
  console.log(`üöÄ Server running on port ${port}`);
  try {
    await initDatabase();
    console.log('‚úÖ Database initialized');
    console.log(`ü§ñ Bot running in ${isProduction ? 'PRODUCTION' : 'DEVELOPMENT'} mode`);
    console.log(`üëë Admin IDs: ${ADMIN_IDS.join(', ')}`);
  } catch (error) {
    console.error('‚ùå Failed to start:', error);
    process.exit(1);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (error) => {
  console.error('Unhandled Rejection:', error);
});

process.on('uncaughtException', (error) => {
  console.error('Uncaught Exception:', error);
  process.exit(1);
});