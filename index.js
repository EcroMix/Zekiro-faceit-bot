const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const mongoose = require('mongoose');

const app = express();
const port = process.env.PORT || 3000;

// –ü—Ä–æ—Å—Ç–æ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
app.get('/', (req, res) => {
  res.send('ü§ñ Zekiro Faceit Bot is running!');
});

app.listen(port, () => {
  console.log(`üöÄ Server running on port ${port}`);
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/zekiro-bot';
mongoose.connect(MONGODB_URI)
  .then(() => console.log('‚úÖ Connected to MongoDB'))
  .catch(err => console.log('‚ùå MongoDB connection error:', err));

// –°—Ö–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userSchema = new mongoose.Schema({
  telegramId: { type: Number, required: true, unique: true },
  telegramUsername: String,
  gameNickname: { type: String, unique: true, sparse: true },
  gameId: { type: String, unique: true, sparse: true },
  friends: [String],
  state: String,
  registeredAt: { type: Date, default: Date.now }
});

const User = mongoose.model('User', userSchema);

const token = process.env.BOT_TOKEN;
const bot = new TelegramBot(token, { polling: true });

// –ü—Ä–æ–≤–µ—Ä–∫–∏
function isValidNickname(nickname) {
  return /^[a-zA-Z0-9_]{3,20}$/.test(nickname);
}

function isValidGameId(id) {
  return /^\d{8,9}$/.test(id);
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
async function showMainMenu(chatId, username) {
  const menuOptions = {
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üéÆ –ù–∞–π—Ç–∏ –º–∞—Ç—á', callback_data: 'find_match' },
          { text: 'üìä –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }
        ],
        [
          { text: 'üèÜ –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤', callback_data: 'rating' },
          { text: 'üë• –î—Ä—É–∑—å—è', callback_data: 'friends' }
        ],
        [
          { text: 'üìã –ö–æ–º–∞–Ω–¥—ã', callback_data: 'commands' },
          { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' }
        ],
        [
          { text: 'üì© –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç', callback_data: 'create_ticket' }
        ]
      ]
    }
  };
  
  bot.sendMessage(chatId, `üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${username}!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, menuOptions);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (callbackQuery) => {
  const msg = callbackQuery.message;
  const chatId = msg.chat.id;
  const data = callbackQuery.data;

  bot.answerCallbackQuery(callbackQuery.id);

  try {
    const user = await User.findOne({ telegramId: chatId, state: 'completed' });
    if (!user) return;

    switch(data) {
      case 'find_match':
        bot.sendMessage(chatId, 'üîç –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–∞—Ç—á...');
        break;
      case 'profile':
        bot.sendMessage(chatId, `üìä –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\nüéÆ Nickname: ${user.gameNickname}\nüÜî Game ID: ${user.gameId}\nüë• –î—Ä—É–∑–µ–π: ${user.friends.length}`);
        break;
      case 'rating':
        const topPlayers = await User.find({ state: 'completed' })
          .sort({ 'registeredAt': -1 })
          .limit(5);
        
        let ratingText = 'üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:\n\n';
        topPlayers.forEach((player, index) => {
          ratingText += `${index + 1}. ${player.gameNickname} - ID: ${player.gameId}\n`;
        });
        
        bot.sendMessage(chatId, ratingText);
        break;
      case 'friends':
        showFriendsMenu(chatId);
        break;
      case 'commands':
        bot.sendMessage(chatId, 'üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n/profile - –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n/friends - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–∑—å—è–º–∏');
        break;
      case 'help':
        bot.sendMessage(chatId, '‚ùì –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n\n‚Ä¢ –ù–∞–π—Ç–∏ –º–∞—Ç—á - –ø–æ–∏—Å–∫ –∏–≥—Ä—ã\n‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å - –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ\n‚Ä¢ –î—Ä—É–∑—å—è - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–∑—å—è–º–∏\n‚Ä¢ –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç - —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞');
        break;
      case 'create_ticket':
        bot.sendMessage(chatId, 'üì© –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å:');
        break;
    }
  } catch (error) {
    console.error('Error handling callback:', error);
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–µ–Ω—é –¥—Ä—É–∑–µ–π —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
async function showFriendsMenu(chatId) {
  try {
    const user = await User.findOne({ telegramId: chatId });
    if (!user) return;

    const friendsMenu = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞', callback_data: 'add_friend' },
            { text: '‚ûñ –£–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–∞', callback_data: 'remove_friend' }
          ],
          [
            { text: 'üìã –°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π', callback_data: 'friends_list' },
            { text: 'üîç –ù–∞–π—Ç–∏ –¥—Ä—É–∑–µ–π', callback_data: 'find_friends' }
          ],
          [
            { text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }
          ]
        ]
      }
    };
    
    bot.sendMessage(chatId, `üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–∑—å—è–º–∏\n\n–í—Å–µ–≥–æ –¥—Ä—É–∑–µ–π: ${user.friends.length}`, friendsMenu);
  } catch (error) {
    console.error('Error showing friends menu:', error);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥—Ä—É–∑–µ–π
bot.on('callback_query', async (callbackQuery) => {
  const msg = callbackQuery.message;
  const chatId = msg.chat.id;
  const data = callbackQuery.data;

  bot.answerCallbackQuery(callbackQuery.id);

  try {
    const user = await User.findOne({ telegramId: chatId, state: 'completed' });
    if (!user) return;

    switch(data) {
      case 'add_friend':
        bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ username –¥—Ä—É–≥–∞ –≤ Telegram (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username):');
        user.friendAction = 'adding';
        await user.save();
        break;
      case 'remove_friend':
        if (user.friends.length === 0) {
          bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥—Ä—É–∑–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
        } else {
          bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ username –¥—Ä—É–≥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:');
          user.friendAction = 'removing';
          await user.save();
        }
        break;
      case 'friends_list':
        if (user.friends.length === 0) {
          bot.sendMessage(chatId, 'üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–∑–µ–π');
        } else {
          const friendsList = user.friends.map((friend, index) => 
            `${index + 1}. ${friend}`
          ).join('\n');
          bot.sendMessage(chatId, `üìã –í–∞—à–∏ –¥—Ä—É–∑—å—è:\n\n${friendsList}`);
        }
        break;
      case 'find_friends':
        const availableFriends = await User.find({ 
          state: 'completed',
          telegramId: { $ne: chatId }
        }).limit(10);
        
        if (availableFriends.length === 0) {
          bot.sendMessage(chatId, 'üòî –ü–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤');
        } else {
          let friendsText = 'üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä–æ–∫–∏:\n\n';
          availableFriends.forEach((player, index) => {
            friendsText += `${index + 1}. ${player.gameNickname} (ID: ${player.gameId})\n`;
          });
          bot.sendMessage(chatId, friendsText);
        }
        break;
      case 'back_to_menu':
        showMainMenu(chatId, user.telegramUsername);
        break;
    }
  } catch (error) {
    console.error('Error handling friends callback:', error);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const username = msg.from.username || msg.from.first_name;
  
  try {
    let user = await User.findOne({ telegramId: chatId });
    
    if (user && user.state === 'completed') {
      showMainMenu(chatId, username);
    } else {
      if (!user) {
        user = new User({
          telegramId: chatId,
          telegramUsername: username,
          gameNickname: null,
          gameId: null,
          friends: [],
          state: 'awaiting_nickname'
        });
      } else {
        user.state = 'awaiting_nickname';
      }
      
      await user.save();
      bot.sendMessage(chatId, `üéÆ –ü—Ä–∏–≤–µ—Ç, ${username}!\n\n–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∏–≥—Ä–æ–≤–æ–π nickname:\n‚Ä¢ –¢–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã\n‚Ä¢ –¶–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª _\n‚Ä¢ –û—Ç 3 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤`);
    }
  } catch (error) {
    console.error('Error in /start:', error);
    bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text?.trim();
  
  if (!text || text.startsWith('/')) return;
  
  try {
    const user = await User.findOne({ telegramId: chatId });
    if (!user) return;
    
    if (user.state === 'completed') {
      if (user.friendAction) {
        await handleFriendActions(msg, user);
      } else {
        bot.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é üì±');
      }
    } else {
      await handleRegistration(msg, user);
    }
  } catch (error) {
    console.error('Error handling message:', error);
    bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –¥—Ä—É–∑–µ–π
async function handleFriendActions(msg, user) {
  const chatId = msg.chat.id;
  const text = msg.text;
  
  try {
    if (user.friendAction === 'adding') {
      if (!user.friends.includes(text)) {
        user.friends.push(text);
        await user.save();
        bot.sendMessage(chatId, `‚úÖ –î—Ä—É–≥ ${text} –¥–æ–±–∞–≤–ª–µ–Ω!`);
      } else {
        bot.sendMessage(chatId, '‚ùå –≠—Ç–æ—Ç –¥—Ä—É–≥ —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ');
      }
      user.friendAction = null;
      await user.save();
      showFriendsMenu(chatId);
    } else if (user.friendAction === 'removing') {
      const index = user.friends.indexOf(text);
      if (index > -1) {
        user.friends.splice(index, 1);
        await user.save();
        bot.sendMessage(chatId, `‚úÖ –î—Ä—É–≥ ${text} —É–¥–∞–ª–µ–Ω!`);
      } else {
        bot.sendMessage(chatId, '‚ùå –î—Ä—É–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ');
      }
      user.friendAction = null;
      await user.save();
      showFriendsMenu(chatId);
    }
  } catch (error) {
    console.error('Error handling friend action:', error);
    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥—Ä—É–≥–∞');
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async function handleRegistration(msg, user) {
  const chatId = msg.chat.id;
  const text = msg.text?.trim();
  
  try {
    if (user.state === 'awaiting_nickname') {
      if (!isValidNickname(text)) {
        return bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ:\n‚Ä¢ –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã (A-Z, a-z)\n‚Ä¢ –¶–∏—Ñ—Ä—ã (0-9)\n‚Ä¢ –°–∏–º–≤–æ–ª _\n‚Ä¢ –î–ª–∏–Ω–∞ 3-20 —Å–∏–º–≤–æ–ª–æ–≤\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∏–∫–Ω–µ–π–º–∞
      const existingNickname = await User.findOne({ gameNickname: text });
      if (existingNickname) {
        return bot.sendMessage(chatId, '‚ùå –≠—Ç–æ—Ç nickname —É–∂–µ –∑–∞–Ω—è—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π.');
      }
      
      user.gameNickname = text;
      user.state = 'awaiting_id';
      await user.save();
      
      bot.sendMessage(chatId, '‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à ID –≤ –∏–≥—Ä–µ:\n‚Ä¢ –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã\n‚Ä¢ 8 –∏–ª–∏ 9 —Å–∏–º–≤–æ–ª–æ–≤\n\n–ü—Ä–∏–º–µ—Ä: 12345678');
    } else if (user.state === 'awaiting_id') {
      if (!isValidGameId(text)) {
        return bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID! –î–æ–ª–∂–µ–Ω –±—ã—Ç—å:\n‚Ä¢ –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã (0-9)\n‚Ä¢ –†–æ–≤–Ω–æ 8 –∏–ª–∏ 9 —Å–∏–º–≤–æ–ª–æ–≤\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å ID
      const existingGameId = await User.findOne({ gameId: text });
      if (existingGameId) {
        return bot.sendMessage(chatId, '‚ùå –≠—Ç–æ—Ç ID —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å.');
      }
      
      user.gameId = text;
      user.state = 'completed';
      await user.save();
      
      bot.sendMessage(chatId, `üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüìù –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n‚Ä¢ Nickname: ${user.gameNickname}\n‚Ä¢ Game ID: ${user.gameId}\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞!`);
      showMainMenu(chatId, user.telegramUsername);
    }
  } catch (error) {
    if (error.code === 11000) {
      bot.sendMessage(chatId, '‚ùå –≠—Ç–æ—Ç nickname –∏–ª–∏ ID —É–∂–µ –∑–∞–Ω—è—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è.');
    } else {
      console.error('Error during registration:', error);
      bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }
}

// –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
bot.onText(/\/data/, async (msg) => {
  const chatId = msg.chat.id;
  if (chatId.toString() === process.env.ADMIN_ID) {
    try {
      const users = await User.find({});
      const userList = users.map(user => 
        `üë§ ${user.telegramUsername}\nüéÆ ${user.gameNickname || '–Ω–µ—Ç'}\nüÜî ${user.gameId || '–Ω–µ—Ç'}\nüë• –î—Ä—É–∑–µ–π: ${user.friends.length}\nüì± ${user.telegramId}\n‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï`
      ).join('\n');
      
      bot.sendMessage(chatId, `üìä –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n${userList || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}`);
    } catch (error) {
      console.error('Error in /data command:', error);
      bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
    }
  }
});

console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å MongoDB –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏!');
